let map @ { Map, ? } = import! std.map
let array @ { Array, ? } = import! std.array
let io @ { ? } = import! std.io
let proc @ { ? } = import! std.process
let result @ { ? } = import! std.result
let sched @ { AttrValue } = import! sched
let jobs = import! jobs
let { time, duration, ? } = import! time
let { ref, (<-), load } = import! std.reference
let { (<|), (|>) } = import! std.function
let cmd = import! cmd
let { unwrap } = import! std.option
let { foldl } = import! std.foldable

let arr_to_map a : Array String -> Map String String =
    (foldl (\mk x ->
            let { m, k } = mk
            match k with
            | Some key -> { m = map.insert key x m, k = None }
            | None -> { m, k = Some x })
        { m = map.empty, k = None } a).m

cmd.add_command "new-log"
    "<name>     'Name for the log'
     <type>     'Type for the log'
     -d --desc=[desc]   	  'Optional description. Equivalent to --arg desc ...'
     -a --attr [key] [val]... 'Optional attributes'"
    (\m -> 
        let name = unwrap <| cmd.value_of m "name"
        let typ = unwrap <| cmd.value_of m "type"
        let key = ref None
        let attrs = arr_to_map <| cmd.values_of m "attr"
        let attrs =
            match cmd.value_of m "desc" with
            | Some d -> map.insert "desc" d attrs
            | None -> attrs
        seq io.println ("name: " ++ name)
        seq io.println ("type: " ++ typ)
        io.println <| "attrs: " ++ (show attrs))
