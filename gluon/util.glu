let { ? } = import! std.string
let { datetime, duration, ? } = import! time
let { DateTime, ? } = datetime
let { Map } = import! std.map
let { (<>) } = import! std.semigroup
let { Value } = import! std.json
let { to_string_pretty, ? } = import! std.json.ser
let { unwrap_ok } = import! std.result

let show_value : Show Value = {
    show = \v -> unwrap_ok (to_string_pretty v)
}

let { ? } = { show = show_value }

let show_map ?a ?b : [Show k] -> [Show v] -> Show (Map k v) = {
    show = \m ->
        rec let show_elems m =
            match m with
            | Tip -> ""
            | Bin k v left Tip -> show_elems left <> a.show k <> ": " <> b.show v
            | Bin k v left right ->
                show_elems left <> a.show k <> ": " <> b.show v <> ", " <> show_elems right
        "{" <> show_elems m <> "}",
}

let { ? } = { show = show_map }

#[derive(Show)]
type Log = { id : Int, typ : String, time : DateTime, attrs : Map String Value }

#[derive(Show)]
type Object = { id : Int, name : String, typ : String, desc : String, attrs : Map String Value }

{
    log = {
        Log,
        show = show_Log,
    },
    map = {
        Map,
        show = show_map,
    },
    obj = {
        Object,
        show = show_Object,
    },
    json = {
        Value,
        show = show_value,
    },
}
